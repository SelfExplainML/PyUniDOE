# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pyunidoe_swig')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pyunidoe_swig')
    _pyunidoe_swig = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module(
                '_pyunidoe_swig', [dirname(__file__)])
        except ImportError:
            import _pyunidoe_swig
            return _pyunidoe_swig
        try:
            _mod = imp.load_module('_pyunidoe_swig', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pyunidoe_swig = swig_import_helper()
    del swig_import_helper
else:
    import _pyunidoe_swig
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError(
    "'%s' object has no attribute '%s'" %
     (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__,
                             self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(
        self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyunidoe_swig.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _pyunidoe_swig.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pyunidoe_swig.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pyunidoe_swig.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pyunidoe_swig.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pyunidoe_swig.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pyunidoe_swig.SwigPyIterator_copy(self)

    def next(self):
        return _pyunidoe_swig.SwigPyIterator_next(self)

    def __next__(self):
        return _pyunidoe_swig.SwigPyIterator___next__(self)

    def previous(self):
        return _pyunidoe_swig.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pyunidoe_swig.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pyunidoe_swig.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pyunidoe_swig.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pyunidoe_swig.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pyunidoe_swig.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pyunidoe_swig.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pyunidoe_swig.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _pyunidoe_swig.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(
        self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pyunidoe_swig.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyunidoe_swig.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _pyunidoe_swig.DoubleVector___bool__(self)

    def __len__(self):
        return _pyunidoe_swig.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _pyunidoe_swig.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyunidoe_swig.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyunidoe_swig.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyunidoe_swig.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyunidoe_swig.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyunidoe_swig.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _pyunidoe_swig.DoubleVector_pop(self)

    def append(self, x):
        return _pyunidoe_swig.DoubleVector_append(self, x)

    def empty(self):
        return _pyunidoe_swig.DoubleVector_empty(self)

    def size(self):
        return _pyunidoe_swig.DoubleVector_size(self)

    def swap(self, v):
        return _pyunidoe_swig.DoubleVector_swap(self, v)

    def begin(self):
        return _pyunidoe_swig.DoubleVector_begin(self)

    def end(self):
        return _pyunidoe_swig.DoubleVector_end(self)

    def rbegin(self):
        return _pyunidoe_swig.DoubleVector_rbegin(self)

    def rend(self):
        return _pyunidoe_swig.DoubleVector_rend(self)

    def clear(self):
        return _pyunidoe_swig.DoubleVector_clear(self)

    def get_allocator(self):
        return _pyunidoe_swig.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _pyunidoe_swig.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _pyunidoe_swig.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _pyunidoe_swig.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pyunidoe_swig.DoubleVector_push_back(self, x)

    def front(self):
        return _pyunidoe_swig.DoubleVector_front(self)

    def back(self):
        return _pyunidoe_swig.DoubleVector_back(self)

    def assign(self, n, x):
        return _pyunidoe_swig.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _pyunidoe_swig.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _pyunidoe_swig.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _pyunidoe_swig.DoubleVector_reserve(self, n)

    def capacity(self):
        return _pyunidoe_swig.DoubleVector_capacity(self)
    __swig_destroy__ = _pyunidoe_swig.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _pyunidoe_swig.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class DoubleVecVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(
        self, DoubleVecVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVecVec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pyunidoe_swig.DoubleVecVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyunidoe_swig.DoubleVecVec___nonzero__(self)

    def __bool__(self):
        return _pyunidoe_swig.DoubleVecVec___bool__(self)

    def __len__(self):
        return _pyunidoe_swig.DoubleVecVec___len__(self)

    def __getslice__(self, i, j):
        return _pyunidoe_swig.DoubleVecVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyunidoe_swig.DoubleVecVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyunidoe_swig.DoubleVecVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyunidoe_swig.DoubleVecVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyunidoe_swig.DoubleVecVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyunidoe_swig.DoubleVecVec___setitem__(self, *args)

    def pop(self):
        return _pyunidoe_swig.DoubleVecVec_pop(self)

    def append(self, x):
        return _pyunidoe_swig.DoubleVecVec_append(self, x)

    def empty(self):
        return _pyunidoe_swig.DoubleVecVec_empty(self)

    def size(self):
        return _pyunidoe_swig.DoubleVecVec_size(self)

    def swap(self, v):
        return _pyunidoe_swig.DoubleVecVec_swap(self, v)

    def begin(self):
        return _pyunidoe_swig.DoubleVecVec_begin(self)

    def end(self):
        return _pyunidoe_swig.DoubleVecVec_end(self)

    def rbegin(self):
        return _pyunidoe_swig.DoubleVecVec_rbegin(self)

    def rend(self):
        return _pyunidoe_swig.DoubleVecVec_rend(self)

    def clear(self):
        return _pyunidoe_swig.DoubleVecVec_clear(self)

    def get_allocator(self):
        return _pyunidoe_swig.DoubleVecVec_get_allocator(self)

    def pop_back(self):
        return _pyunidoe_swig.DoubleVecVec_pop_back(self)

    def erase(self, *args):
        return _pyunidoe_swig.DoubleVecVec_erase(self, *args)

    def __init__(self, *args):
        this = _pyunidoe_swig.new_DoubleVecVec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pyunidoe_swig.DoubleVecVec_push_back(self, x)

    def front(self):
        return _pyunidoe_swig.DoubleVecVec_front(self)

    def back(self):
        return _pyunidoe_swig.DoubleVecVec_back(self)

    def assign(self, n, x):
        return _pyunidoe_swig.DoubleVecVec_assign(self, n, x)

    def resize(self, *args):
        return _pyunidoe_swig.DoubleVecVec_resize(self, *args)

    def insert(self, *args):
        return _pyunidoe_swig.DoubleVecVec_insert(self, *args)

    def reserve(self, n):
        return _pyunidoe_swig.DoubleVecVec_reserve(self, n)

    def capacity(self):
        return _pyunidoe_swig.DoubleVecVec_capacity(self)
    __swig_destroy__ = _pyunidoe_swig.delete_DoubleVecVec
    __del__ = lambda self: None
DoubleVecVec_swigregister = _pyunidoe_swig.DoubleVecVec_swigregister
DoubleVecVec_swigregister(DoubleVecVec)

class IntegerVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(
        self, IntegerVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntegerVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pyunidoe_swig.IntegerVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyunidoe_swig.IntegerVector___nonzero__(self)

    def __bool__(self):
        return _pyunidoe_swig.IntegerVector___bool__(self)

    def __len__(self):
        return _pyunidoe_swig.IntegerVector___len__(self)

    def __getslice__(self, i, j):
        return _pyunidoe_swig.IntegerVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyunidoe_swig.IntegerVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyunidoe_swig.IntegerVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyunidoe_swig.IntegerVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyunidoe_swig.IntegerVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyunidoe_swig.IntegerVector___setitem__(self, *args)

    def pop(self):
        return _pyunidoe_swig.IntegerVector_pop(self)

    def append(self, x):
        return _pyunidoe_swig.IntegerVector_append(self, x)

    def empty(self):
        return _pyunidoe_swig.IntegerVector_empty(self)

    def size(self):
        return _pyunidoe_swig.IntegerVector_size(self)

    def swap(self, v):
        return _pyunidoe_swig.IntegerVector_swap(self, v)

    def begin(self):
        return _pyunidoe_swig.IntegerVector_begin(self)

    def end(self):
        return _pyunidoe_swig.IntegerVector_end(self)

    def rbegin(self):
        return _pyunidoe_swig.IntegerVector_rbegin(self)

    def rend(self):
        return _pyunidoe_swig.IntegerVector_rend(self)

    def clear(self):
        return _pyunidoe_swig.IntegerVector_clear(self)

    def get_allocator(self):
        return _pyunidoe_swig.IntegerVector_get_allocator(self)

    def pop_back(self):
        return _pyunidoe_swig.IntegerVector_pop_back(self)

    def erase(self, *args):
        return _pyunidoe_swig.IntegerVector_erase(self, *args)

    def __init__(self, *args):
        this = _pyunidoe_swig.new_IntegerVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pyunidoe_swig.IntegerVector_push_back(self, x)

    def front(self):
        return _pyunidoe_swig.IntegerVector_front(self)

    def back(self):
        return _pyunidoe_swig.IntegerVector_back(self)

    def assign(self, n, x):
        return _pyunidoe_swig.IntegerVector_assign(self, n, x)

    def resize(self, *args):
        return _pyunidoe_swig.IntegerVector_resize(self, *args)

    def insert(self, *args):
        return _pyunidoe_swig.IntegerVector_insert(self, *args)

    def reserve(self, n):
        return _pyunidoe_swig.IntegerVector_reserve(self, n)

    def capacity(self):
        return _pyunidoe_swig.IntegerVector_capacity(self)
    __swig_destroy__ = _pyunidoe_swig.delete_IntegerVector
    __del__ = lambda self: None
IntegerVector_swigregister = _pyunidoe_swig.IntegerVector_swigregister
IntegerVector_swigregister(IntegerVector)

class IntegerVecVec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(
        self, IntegerVecVec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntegerVecVec, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pyunidoe_swig.IntegerVecVec_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyunidoe_swig.IntegerVecVec___nonzero__(self)

    def __bool__(self):
        return _pyunidoe_swig.IntegerVecVec___bool__(self)

    def __len__(self):
        return _pyunidoe_swig.IntegerVecVec___len__(self)

    def __getslice__(self, i, j):
        return _pyunidoe_swig.IntegerVecVec___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyunidoe_swig.IntegerVecVec___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyunidoe_swig.IntegerVecVec___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyunidoe_swig.IntegerVecVec___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyunidoe_swig.IntegerVecVec___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyunidoe_swig.IntegerVecVec___setitem__(self, *args)

    def pop(self):
        return _pyunidoe_swig.IntegerVecVec_pop(self)

    def append(self, x):
        return _pyunidoe_swig.IntegerVecVec_append(self, x)

    def empty(self):
        return _pyunidoe_swig.IntegerVecVec_empty(self)

    def size(self):
        return _pyunidoe_swig.IntegerVecVec_size(self)

    def swap(self, v):
        return _pyunidoe_swig.IntegerVecVec_swap(self, v)

    def begin(self):
        return _pyunidoe_swig.IntegerVecVec_begin(self)

    def end(self):
        return _pyunidoe_swig.IntegerVecVec_end(self)

    def rbegin(self):
        return _pyunidoe_swig.IntegerVecVec_rbegin(self)

    def rend(self):
        return _pyunidoe_swig.IntegerVecVec_rend(self)

    def clear(self):
        return _pyunidoe_swig.IntegerVecVec_clear(self)

    def get_allocator(self):
        return _pyunidoe_swig.IntegerVecVec_get_allocator(self)

    def pop_back(self):
        return _pyunidoe_swig.IntegerVecVec_pop_back(self)

    def erase(self, *args):
        return _pyunidoe_swig.IntegerVecVec_erase(self, *args)

    def __init__(self, *args):
        this = _pyunidoe_swig.new_IntegerVecVec(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _pyunidoe_swig.IntegerVecVec_push_back(self, x)

    def front(self):
        return _pyunidoe_swig.IntegerVecVec_front(self)

    def back(self):
        return _pyunidoe_swig.IntegerVecVec_back(self)

    def assign(self, n, x):
        return _pyunidoe_swig.IntegerVecVec_assign(self, n, x)

    def resize(self, *args):
        return _pyunidoe_swig.IntegerVecVec_resize(self, *args)

    def insert(self, *args):
        return _pyunidoe_swig.IntegerVecVec_insert(self, *args)

    def reserve(self, n):
        return _pyunidoe_swig.IntegerVecVec_reserve(self, n)

    def capacity(self):
        return _pyunidoe_swig.IntegerVecVec_capacity(self)
    __swig_destroy__ = _pyunidoe_swig.delete_IntegerVecVec
    __del__ = lambda self: None
IntegerVecVec_swigregister = _pyunidoe_swig.IntegerVecVec_swigregister
IntegerVecVec_swigregister(IntegerVecVec)

class List(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(
        self, List, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, List, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Init_Design"] = _pyunidoe_swig.List_Init_Design_set
    __swig_getmethods__["Init_Design"] = _pyunidoe_swig.List_Init_Design_get
    if _newclass:
        Init_Design = _swig_property(
    _pyunidoe_swig.List_Init_Design_get,
     _pyunidoe_swig.List_Init_Design_set)
    __swig_setmethods__["Final_Design"] = _pyunidoe_swig.List_Final_Design_set
    __swig_getmethods__["Final_Design"] = _pyunidoe_swig.List_Final_Design_get
    if _newclass:
        Final_Design = _swig_property(
    _pyunidoe_swig.List_Final_Design_get,
     _pyunidoe_swig.List_Final_Design_set)
    __swig_setmethods__["Init_Obj"] = _pyunidoe_swig.List_Init_Obj_set
    __swig_getmethods__["Init_Obj"] = _pyunidoe_swig.List_Init_Obj_get
    if _newclass:
        Init_Obj = _swig_property(
    _pyunidoe_swig.List_Init_Obj_get,
     _pyunidoe_swig.List_Init_Obj_set)
    __swig_setmethods__["Final_Obj"] = _pyunidoe_swig.List_Final_Obj_set
    __swig_getmethods__["Final_Obj"] = _pyunidoe_swig.List_Final_Obj_get
    if _newclass:
        Final_Obj = _swig_property(
    _pyunidoe_swig.List_Final_Obj_get,
     _pyunidoe_swig.List_Final_Obj_set)
    __swig_setmethods__["Time_Second"] = _pyunidoe_swig.List_Time_Second_set
    __swig_getmethods__["Time_Second"] = _pyunidoe_swig.List_Time_Second_get
    if _newclass:
        Time_Second = _swig_property(
    _pyunidoe_swig.List_Time_Second_get,
     _pyunidoe_swig.List_Time_Second_set)
    __swig_setmethods__[
        "Criterion_history"] = _pyunidoe_swig.List_Criterion_history_set
    __swig_getmethods__[
        "Criterion_history"] = _pyunidoe_swig.List_Criterion_history_get
    if _newclass:
        Criterion_history = _swig_property(
    _pyunidoe_swig.List_Criterion_history_get,
     _pyunidoe_swig.List_Criterion_history_set)

    def __init__(self):
        this = _pyunidoe_swig.new_List()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pyunidoe_swig.delete_List
    __del__ = lambda self: None
List_swigregister = _pyunidoe_swig.List_swigregister
List_swigregister(List)


def criteria_selector(crit):
    return _pyunidoe_swig.criteria_selector(crit)
criteria_selector = _pyunidoe_swig.criteria_selector

def Generate_init_matrix(init_method, nsamp, nv, nlevel, initX):
    return _pyunidoe_swig.Generate_init_matrix(
        init_method, nsamp, nv, nlevel, initX)
Generate_init_matrix = _pyunidoe_swig.Generate_init_matrix

def Generate_Aug_matrix(init_method, xp, nnew, nv, nlevel, initX):
    return _pyunidoe_swig.Generate_Aug_matrix(
        init_method, xp, nnew, nv, nlevel, initX)
Generate_Aug_matrix = _pyunidoe_swig.Generate_Aug_matrix

def CritEval(x0, nlevel, crit):
    return _pyunidoe_swig.CritEval(x0, nlevel, crit)
CritEval = _pyunidoe_swig.CritEval

def SATA_UD(nsamp, nv, nlevel, init_method, initX, crit,
            maxiter, hits_ratio, levelpermt, rand_seed):
    return _pyunidoe_swig.SATA_UD(
        nsamp, nv, nlevel, init_method, initX, crit, maxiter, hits_ratio, levelpermt, rand_seed)
SATA_UD = _pyunidoe_swig.SATA_UD

def SATA_AUD(xp, nnew, nv, nlevel, init_method, initX, crit,
             maxiter, hits_ratio, levelpermt, rand_seed):
    return _pyunidoe_swig.SATA_AUD(
        xp, nnew, nv, nlevel, init_method, initX, crit, maxiter, hits_ratio, levelpermt, rand_seed)
SATA_AUD = _pyunidoe_swig.SATA_AUD

def SATA_AUD_COL(xp, nvnew, nlevel, init_method, initX, crit,
                 maxiter, hits_ratio, levelpermt, rand_seed):
    return _pyunidoe_swig.SATA_AUD_COL(
        xp, nvnew, nlevel, init_method, initX, crit, maxiter, hits_ratio, levelpermt, rand_seed)
SATA_AUD_COL = _pyunidoe_swig.SATA_AUD_COL
# This file is compatible with both classic and new-style classes.
